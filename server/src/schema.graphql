# import Query.user, Query.jobPosting, Mutation.updateUserProfile from "./generated/prisma.graphql"
# import PayType, PositionType, User, Role, ID, File, Filetype, UserProfile, BusinessProfile, Location from "./generated/prisma.graphql"
# import JobPosting, Application, UserOrderByInput from "./generated/prisma.graphql"

scalar Upload

type Query {
  me: User
  feed(filter: String, skip: Int, first: Int, orderBy: UserOrderByInput): Feed!
}

type Feed {
  users: [User!]!
  jobpostings: [JobPosting!]!
  count: Int!
}

type Mutation {
  signup (email: String!, password: String!, username: String!, role: Role!, confirmPassword: String!): AuthPayload!
  login (username: String!, password: String!): AuthPayload!
  updateuser (username: String!, email: String!, firstname: String!, lastname: String!, preferredname: String, phonenumber: String!, newuser: Boolean!): UserPayload!
  uploadFile (file: Upload!, name: String, filetype: Filetype!, size: Float!, filename: String!, fieldId: String!, mimetype: String!): UploadPayload!
  uploadFiles (files: [DocumentInput!]!): UploadsPayload!
  renameFile (path: String!, name: String!): RenameFilePayload!
  updatePassword (username: String!, oldpassword: String!, newpassword: String!, newpassword2: String!): UpdatePasswordPayload!
  fileDelete (path: String!): File!
  createApplication (jobpostingid: ID!): ApplicationPayload!
  toggleUserActive (id: ID!, activated: Boolean!): User!
  createOrEditPosting (
    title: String,
    type: String,
    duration: String,
    city: String,
    region: String,
    country: String,
    openings: String,
    description: String,
    contactname: String,
    salary: String
    paytype: PayType,
    deadline: String,
    coverletter: Boolean
    newPosting: Boolean
    id: ID): JobPostingPayload!
  deletePosting(id: ID!): JobPosting!
  resetPassword(password: String!, confirmPassword: String!, resetPasswordToken: String!): AuthPayload!
  sendLinkValidateEmail(email: String!): ValidatePayload!
  validateEmail(validateEmailToken: String!): AuthPayload!
  forgotPassword(email: String!): ValidatePayload!
}

type AuthErrors {
  username: String
  email: String
  password: String
  confirmPassword: String
  login: String
  resetPass: String
  validateEmail: String
}

type AuthPayload {
  token: String
  user: User
  errors: AuthErrors
}

type ValidatePayload {
  user: User
  error: String
}

type JobPostingPayload {
  jobposting: JobPosting
  errors: JobPostingErrors
}

type JobPostingErrors {
  title: String
  duration: String
  city: String
  region: String
  country: String
  openings: String
  description: String
  salary: String
  deadline: String
}

type UploadError {
  fieldId: String
  message: String
}

type QuotaError {
  uploadSize: Float
  remaining: Float
}

type UploadPayload {
  file: File
  error: UploadError
  quotaError: QuotaError
}

type UploadsPayload {
  success: Boolean
  errors: [UploadError]
  quotaError: QuotaError
}

type UserErrors {
  username: String
  email: String
  firstname: String
  lastname: String
  phonenumber: String
}

type UserPayload {
  user: User
  errors: UserErrors
}

type UpdatePasswordErrors {
  oldpassword: String
  newpassword: String
  newpassword2: String
}

type UpdatePasswordPayload {
  success: Boolean
  errors: UpdatePasswordErrors
}

type User {
  id: ID!
  username: String!
  email: String!
  role: Role!
  activated: Boolean
  docsize: Float!
  userprofile: UserProfile
  businessprofile: BusinessProfile
  files(filetype: Filetype): [File]
}

type JobPosting {
  id: ID!
  title: String!
  type: PositionType
  duration: Int
  location: Location
  openings: Int
  description: String!
  contactname: String
  salary: Float
  deadline: DateTime!
  coverletter: Boolean
  applications: [Application!]!
  paytype: PayType
  activated: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  businessprofile: BusinessProfile!
}

input DocumentInput {
  file: Upload!
  name: String
  filetype: String!
  mimetype: String!
  size: Float!
  fieldId: String!
  filename: String!
}

type ApplicationPayload {
  application: Application
}

type RenameFilePayload {
  success: Boolean
  error: String
}
