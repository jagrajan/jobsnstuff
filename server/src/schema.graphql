# import Query.user, Query.jobPosting, Mutation.updateUserProfile from "./generated/prisma.graphql"
# import User, Role, ID, File, Filetype, UserProfile, BusinessProfile, Location, JobPosting, Application, UserOrderByInput from "./generated/prisma.graphql"

scalar Upload

type Query {
  me: User
  feed(filter: String, skip: Int, first: Int, orderBy: UserOrderByInput): Feed!
}

type Feed {
  users: [User!]!
  count: Int!
}

type Mutation {
  signup (email: String!, password: String!, username: String!, role: Role!, activated: Boolean!, confirmPassword: String!): AuthPayload!
  login (username: String!, password: String!): AuthPayload!
  updateuser (username: String!, email: String!, firstname: String!, lastname: String!, preferredname: String, phonenumber: String!): UserPayload!
  uploadFile (file: Upload!, name: String, filetype: Filetype!, size: Float!, filename: String!, fieldId: String!, mimetype: String!): UploadPayload!
  uploadFiles (files: [DocumentInput!]!): UploadsPayload!
  createJobPosting (title: String!, type: String, duration: String!, streetaddress: String!, city: String!, province: String!, country: String!, postalcode: String!, openings: String, description: String, contactname: String, salary: String, deadline: DateTime): JobPostingPayload!
  updatePassword (username: String!, oldpassword: String!, newpassword: String!, newpassword2: String!): UpdatePasswordPayload!
  fileDelete (path: String!): File!
  createApplication (jobpostingid: ID!): ApplicationPayload!
}

type AuthErrors {
  username: String
  email: String
  password: String
  confirmPassword: String
  login: String
}

type AuthPayload {
  token: String
  user: User
  errors: AuthErrors
}

type JobPostingPayload {
  jobposting: JobPosting
  errors: JobPostingErrors
}

type JobPostingErrors {
  title: String
  type: String
  duration: String
  createdAt: String
  updatedAt: String
  streetaddress: String
  city: String
  province: String
  country: String
  postalcode: String
  opening: String
  description: String
  contactname: String
  salary: String
  deadline: String
}

type UploadError {
  fieldId: String
  message: String
}

type UploadPayload {
  file: File
  error: UploadError
}

type UploadsPayload {
  success: Boolean
  errors: [UploadError]
}

type UserErrors {
  username: String
  email: String
  firstname: String
  lastname: String
  phonenumber: String
}

type UserPayload {
  user: User
  errors: UserErrors
}

type UpdatePasswordErrors {
  oldpassword: String
  newpassword: String
  newpassword2: String
}

type UpdatePasswordPayload {
  success: Boolean
  errors: UpdatePasswordErrors
}

type User {
  id: ID!
  username: String!
  email: String!
  role: Role!
  userprofile: UserProfile
  businessprofile: BusinessProfile
  files: [File]
}

input DocumentInput {
  file: Upload!
  name: String
  filetype: String!
  mimetype: String!
  size: Float!
  fieldId: String!
  filename: String!
}

type ApplicationPayload {
  application: Application
}
